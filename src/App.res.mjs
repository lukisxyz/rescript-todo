// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Title from "./components/layout/Title.res.mjs";
import * as Utils from "./lib/Utils.res.mjs";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Container from "./components/layout/Container.res.mjs";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as FormCreate from "./components/layout/FormCreate.res.mjs";
import * as LocalStorage from "./lib/LocalStorage.res.mjs";
import * as TaskCardView from "./components/ui/TaskCardView.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function App(props) {
  var match = React.useState(function () {
        return [];
      });
  var setLKey = match[1];
  var lKey = match[0];
  React.useEffect((function () {
          try {
            var keys = LocalStorage.getItem("key");
            var parsedArray = keys.split(",");
            var result = parsedArray.map(function (x) {
                  return {
                          id: x,
                          name: LocalStorage.getItem(x)
                        };
                });
            setLKey(function (param) {
                  return result;
                });
          }
          catch (raw_exn){
            var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
            if (exn.RE_EXN_ID === Js_exn.$$Error) {
              LocalStorage.setItem("key", "");
            } else {
              throw exn;
            }
          }
        }), []);
  var triggerRerender = function () {
    try {
      var keys = LocalStorage.getItem("key");
      var parsedArray = keys.split(",");
      var result = parsedArray.map(function (x) {
            return {
                    id: x,
                    name: LocalStorage.getItem(x)
                  };
          });
      return setLKey(function (param) {
                  return result;
                });
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn.RE_EXN_ID === Js_exn.$$Error) {
        return LocalStorage.setItem("key", "");
      }
      throw exn;
    }
  };
  return JsxRuntime.jsxs(Container.make, {
              children: [
                JsxRuntime.jsx(Title.make, {
                      task: lKey.length
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              className: "w-[150%] -left-6 absolute top-1/2 -translate-y-1/2 h-[1px] bg-black/10"
                            }),
                        JsxRuntime.jsx(FormCreate.make, {
                              onSubmitEvent: triggerRerender
                            })
                      ],
                      className: "text-right mt-9 relative mb-20 px-2"
                    }),
                JsxRuntime.jsx("ul", {
                      children: lKey.map(function (x) {
                            return JsxRuntime.jsx("li", {
                                        children: JsxRuntime.jsx(TaskCardView.make, {
                                              checked: false,
                                              onChange: (function (param) {
                                                  var key = x.id;
                                                  try {
                                                    LocalStorage.removeItem(key);
                                                    var prevKeys = LocalStorage.getItem("key");
                                                    var stringArray = Js_string.split(",", prevKeys);
                                                    var filterredKeys = stringArray.filter(function (item) {
                                                          return item !== key;
                                                        });
                                                    var keys = filterredKeys.join(",");
                                                    LocalStorage.setItem("key", keys);
                                                    if (filterredKeys.length === 0) {
                                                      setLKey(function (param) {
                                                            return [];
                                                          });
                                                    } else {
                                                      var result = filterredKeys.map(function (x) {
                                                            return {
                                                                    id: x,
                                                                    name: LocalStorage.getItem(x)
                                                                  };
                                                          });
                                                      setLKey(function (param) {
                                                            return result;
                                                          });
                                                    }
                                                    return Utils.notify("Success to remove task");
                                                  }
                                                  catch (raw_exn){
                                                    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                                                    if (exn.RE_EXN_ID === Js_exn.$$Error) {
                                                      return Utils.notify("Fail to remove task");
                                                    }
                                                    throw exn;
                                                  }
                                                }),
                                              text: x.name
                                            })
                                      }, x.id);
                          }),
                      className: "max-h-[64vh] overflow-y-auto scroll-m-1 scroll-container"
                    })
              ]
            });
}

var make = App;

export {
  make ,
}
/* Title Not a pure module */
